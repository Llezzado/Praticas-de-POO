{
    "patches": [
        {
            "label": "2025-02-27_22-18-07",
            "content": "@@ -54,923 +54,28 @@\n am%3E%0A\n-%0A#include %22fn.hpp%22%0A%0Ausing namespace std;%0A%0Aclass Player%0A%7B%0Aprivate:%0A    /* data */%0A    int label;%0A    int pos;%0A    bool free;%0Apublic:%0A    Player(int x) : label(x)%7B%0A        pos = 0;%0A        free = true;%0A    %7D;%0A    bool esta_livre()%7Breturn free;%7D%0A    %0A    int get_label()%7Breturn label;%7D%0A    int get_pos()%7Breturn pos;%7D%0A    void set_pos(int numero)%7B pos = numero;%7D%0A    void set_free(bool libertar)%7Bfree = libertar;%7D%0A%0A    std::string str() const%7B%0A        return fn::format(%22%5B%7B%7D:%7B%7D:%7B%7D%5D%22,label,pos,free);%0A    %7D;%0A    %0A%7D;%0A%0A%0A%0A%0Aclass tabuleiro%0A%7B%0Aprivate:%0A    vector%3Cint%3E armadilhas;%0A    vector%3CPlayer%3E Jogadores;%0A    bool running;%0A    int board_size;%0A%0Apublic:%0A    tabuleiro(int nPlayers,int size): board_size(size) %7B%0A        running = true;%0A        for (auto i = 0; i %3C nPlayers; i++)%0A        %7B%0A            Jogadores.push_back(Player(i));%0A        %7D%0A        %0A    %7D;%0A    string str()%7B%7D%0A    void add_trap()%7B%7D%0A    void roll()%7B%7D%0A%0A%7D;%0A\n+using namespace std;\n %0A%0Ain\n"
        },
        {
            "label": "2025-02-27_23-10-04",
            "content": "@@ -902,23 +902,20 @@\n %0A    %7D;%0A\n-%0A\n     \n-//\n string s\n@@ -916,32 +916,29 @@\n ring str()%7B%7D\n-;\n %0A    \n-//\n void add_tra\n@@ -946,16 +946,13 @@\n ()%7B%7D\n-;\n %0A    \n-//\n void\n@@ -960,17 +960,16 @@\n roll()%7B%7D\n-;\n %0A%0A%7D;%0A%0A%0Ai\n"
        },
        {
            "label": "2025-02-27_23-10-28",
            "content": "@@ -521,23 +521,34 @@\n at(%22\n-Player\n+%5B%7B%7D:%7B%7D:\n %7B%7D\n+%5D\n %22,label\n+,pos,free\n );%0A \n@@ -727,13 +727,8 @@\n yers\n- = 2 \n ,int\n@@ -736,12 +736,8 @@\n size\n- = 5\n ): b\n@@ -911,556 +911,23 @@\n     \n+//\n string \n- \n str()\n- const%7B%0A%0A        string buffer = %22%22;%0A%0A        for (auto i = 0; i %3C static_cast%3Cint%3E(Jogadores.size()); i++)%0A        %7B%0A            buffer += Jogadores%5Bi%5D.str() + %22: %22;%0A            %0A            for (auto i = 0; i %3C board_size; i++)%0A            %7B%0A                buffer += %22.%22;%0A            %7D%0A            %0A            buffer += %22%5Cn%22;%0A%0A        %7D%0A%0A        buffer += %22traps_: %22;%0A        for (auto i = 0; i %3C board_size; i++)%0A        %7B%0A            buffer += %22.%22;%0A        %7D%0A%0A        buffer += %22%5Cn%22;%0A%0A        return buffer%0A        %0A        %0A    \n+%7B\n %7D;%0A \n@@ -995,41 +995,8 @@\n  %7B%0A%0A\n-    auto Jumanji = tabuleiro();%0A%0A\n     \n@@ -1243,24 +1243,26 @@\n             \n+//\n  int nPlayer\n@@ -1278,24 +1278,26 @@\n             \n+//\n  ss %3E%3E nPlay\n@@ -1325,28 +1325,24 @@\n     \n- Jumanji = tabuleiro\n+// board = Board\n (nPl\n@@ -1406,16 +1406,18 @@\n         \n+//\n  int pos\n@@ -1426,24 +1426,26 @@\n             \n+//\n  ss %3E%3E pos;%0A\n@@ -1609,51 +1609,8 @@\n ) %7B%0A\n-            cout %3C%3C Jumanji.str() %3C%3C endl;%0A\n     \n"
        },
        {
            "label": "2025-02-27_23-22-44",
            "content": "@@ -1384,16 +1384,40 @@\n      %7D%0A%0A\n+        buffer += %22%5Cn%22;%0A\n %0A       \n@@ -1430,17 +1430,16 @@\n n buffer\n-;\n %0A       \n"
        },
        {
            "label": "2025-02-27_23-23-03",
            "content": "@@ -1285,17 +1285,16 @@\n  %22traps_\n-_\n : %22;%0A   \n"
        },
        {
            "label": "2025-02-27_23-23-14",
            "content": "@@ -874,10 +874,8 @@\n er(i\n-+1\n ));%0A\n"
        },
        {
            "label": "2025-02-27_23-23-38",
            "content": "@@ -1126,16 +1126,16 @@\n uto \n-j\n+i\n  = 0; \n-j\n+i\n  %3C b\n@@ -1145,17 +1145,17 @@\n d_size; \n-j\n+i\n ++)%0A    \n@@ -1168,160 +1168,8 @@\n   %7B%0A\n-                %0A                if (Jogadores%5Bi%5D.get_pos() == j)%0A                %7B%0A                    /* code */%0A                %7D%0A                %0A%0A%0A\n     \n"
        },
        {
            "label": "2025-02-27_23-26-25",
            "content": "@@ -1117,19 +1117,20 @@\n    for (\n-int\n+auto\n  j = 0; \n@@ -1201,17 +1201,16 @@\n     if (\n- \n Jogadore\n"
        },
        {
            "label": "2025-02-27_23-27-05",
            "content": "@@ -333,21 +333,16 @@\n label;%7D%0A\n-    %0A\n     int \n@@ -364,17 +364,16 @@\n n pos;%7D%0A\n-%0A\n     void\n@@ -920,16 +920,22 @@\n g  str()\n+ const\n %7B%0A%0A     \n@@ -1283,94 +1283,8 @@\n  */%0A\n-                    buffer += Jogadores%5Bi%5D.get_label();%0A                    continue;%0A\n     \n"
        },
        {
            "label": "2025-02-27_23-31-11",
            "content": "@@ -1313,18 +1313,8 @@\n  += \n-to_string(\n Joga\n@@ -1333,17 +1333,16 @@\n _label()\n-)\n ;%0A      \n"
        },
        {
            "label": "2025-02-27_23-33-32",
            "content": "@@ -523,17 +523,17 @@\n format(%22\n-p\n+P\n layer%7B%7D%22\n"
        },
        {
            "label": "2025-02-27_23-33-45",
            "content": "@@ -758,11 +758,8 @@\n size\n-+ 1\n ) %7B%0A\n"
        },
        {
            "label": "2025-02-27_23-35-09",
            "content": "@@ -1549,30 +1549,8 @@\n  %22;%0A\n-        bool no_trap;%0A\n     \n@@ -1600,19 +1600,16 @@\n        %7B\n-   \n %0A       \n@@ -1617,401 +1617,22 @@\n     \n-no_trap = true;%0A            for (auto j = 0; j %3C static_cast%3Cint%3E(armadilhas.size()); i++)%0A            %7B%0A                if (armadilhas%5Bj%5D == i)%0A                %7B%0A                    buffer += %22x%22;%0A                    no_trap = false;%0A                %7D%0A                %0A            %7D%0A            %0A            if (no_trap)%0A            %7B%0A                buffer += %22.%22;%0A            %7D%0A            \n+buffer += %22.%22;\n %0A   \n@@ -1692,21 +1692,18 @@\n  %7D;%0A    \n-%0A    \n+//\n void add\n@@ -1712,66 +1712,12 @@\n rap(\n-int trap)%7B%0A        armadilhas.push_back(trap);%0A    %7D;%0A    \n+)%7B%7D;\n %0A   \n"
        },
        {
            "label": "2025-02-27_23-42-05",
            "content": "@@ -1747,61 +1747,8 @@\n   %7B%0A\n-                cout %3C%3C armadilhas%5Bj%5D %3C%3C %22---=== %5Cn%22%0A\n     \n"
        },
        {
            "label": "2025-02-27_23-43-09",
            "content": "@@ -1795,17 +1795,16 @@\n -=== %5Cn%22\n-;\n %0A       \n"
        },
        {
            "label": "2025-02-27_23-43-15",
            "content": "@@ -2767,22 +2767,21 @@\n     \n- Jumanji\n+// board\n .add\n-_t\n+T\n rap(\n"
        },
        {
            "label": "2025-02-27_23-44-08",
            "content": "@@ -1751,32 +1751,69 @@\n                 \n+cout %3C%3C armadilhas%5Bj%5D %3C%3C %22---=== %5Cn%22;\n %0A               \n"
        },
        {
            "label": "2025-02-27_23-44-47",
            "content": "@@ -1724,17 +1724,17 @@\n ize()); \n-j\n+i\n ++)%0A    \n"
        },
        {
            "label": "2025-02-27_23-50-20",
            "content": "@@ -649,19 +649,20 @@\n es;%0A    \n-int\n+bool\n  running\n@@ -757,24 +757,48 @@\n (size+ 1) %7B%0A\n+        running = true;%0A\n         for \n@@ -2191,24 +2191,26 @@\n %7D;%0A    %0A    \n+//\n void roll(in\n@@ -2211,198 +2211,10 @@\n oll(\n-int passos)%7B%0A        Jogadores%5Brunning%5D.set_pos(Jogadores%5Brunning%5D.get_pos() + passos);%0A        cout %3C%3C Jogadores%5Brunning%5D.str() %3C%3C %22andou para%22 %3C%3C Jogadores%5Brunning%5D.get_pos() %3C%3C endl;%0A    \n+)%7B\n %7D;%0A%0A\n@@ -2794,24 +2794,26 @@\n             \n+//\n  int value;%0A\n@@ -2820,24 +2820,26 @@\n             \n+//\n  ss %3E%3E value\n@@ -2844,29 +2844,8 @@\n ue;%0A\n-             Jumanji%0A\n     \n"
        },
        {
            "label": "2025-02-27_23-55-04",
            "content": "@@ -3021,21 +3021,8 @@\n anji\n-.roll(value);\n %0A   \n"
        },
        {
            "label": "2025-02-27_23-55-21",
            "content": "@@ -2313,17 +2313,16 @@\n r() %3C%3C %22\n- \n andou pa\n@@ -2323,17 +2323,16 @@\n dou para\n- \n %22 %3C%3C Jog\n"
        },
        {
            "label": "2025-02-27_23-55-32",
            "content": "@@ -2197,89 +2197,8 @@\n s)%7B%0A\n-        if (running %3E= static_cast%3Cint%3E(Jogadores.size()))%7Brunning = 0%7D%0A        %0A\n     \n@@ -2372,27 +2372,8 @@\n dl;%0A\n-        running++;%0A\n     \n"
        },
        {
            "label": "2025-02-27_23-58-00",
            "content": "@@ -2263,17 +2263,16 @@\n ning = 0\n-;\n %7D%0A      \n"
        },
        {
            "label": "2025-02-27_23-58-12",
            "content": "@@ -2454,356 +2454,8 @@\n dl;%0A\n-        %0A        for (auto i = 0; i %3C static_cast%3Cint%3E(armadilhas.size()); i++)%0A        %7B%0A            if (Jogadores%5Brunning%5D.get_pos() == armadilhas%5Bi%5D)%0A            %7B%0A                cout %3C%3C Jogadores%5Brunning%5D.str() %3C%3C %22 caiu em uma armadilha%22%3C%3C endl;%0A                Jogadores%5Brunning%5D.set_free(false);%0A            %7D%0A        %7D%0A        %0A%0A        %0A%0A\n     \n"
        },
        {
            "label": "2025-02-28_00-01-07",
            "content": "@@ -2269,400 +2269,8 @@\n  0;%7D\n-%0A%0A        if (!Jogadores%5Brunning%5D.esta_livre())%0A        %7B%0A            if (passos%252 == 0)%0A            %7B%0A                cout %3C%3C Jogadores%5Brunning%5D.str() %3C%3C %22 est%C3%A1 liver%22 %3C%3C endl;%0A                Jogadores%5Brunning%5D.set_free(true);%0A            %7Delse%7B%0A                cout %3C%3C Jogadores%5Brunning%5D.str() %3C%3C %22 continua preso%22 %3C%3C endl;%0A            %7D%0A            %0A            return;%0A        %7D%0A        \n %0A   \n"
        },
        {
            "label": "2025-02-28_00-03-46",
            "content": "@@ -2614,34 +2614,24 @@\n             \n-running++;\n %0A           \n"
        },
        {
            "label": "2025-02-28_00-04-35",
            "content": "@@ -2426,19 +2426,18 @@\n %3C %22 \n-s\n e\n+st%C3%A1\n  li\n-b\n+v\n er\n-tou\n %22 %3C%3C\n"
        },
        {
            "label": "2025-02-28_00-04-50",
            "content": "@@ -3194,158 +3194,8 @@\n    %0A\n-        if (Jogadores%5Brunning%5D.get_pos() %3E= board_size)%0A        %7B%0A            cout %3C%3C Jogadores%5Brunning%5D.str() %3C%3C %22 ganhou%22%3C%3C endl;%0A        %7D%0A        \n %0A   \n"
        },
        {
            "label": "2025-02-28_00-06-03",
            "content": "@@ -2757,172 +2757,8 @@\n s);%0A\n-%0A        if (Jogadores%5Brunning%5D.get_pos() %3E= board_size)%0A        %7B%0A            cout %3C%3C Jogadores%5Brunning%5D.str() %3C%3C %22 ganhou%22%3C%3C endl;%0A            return;%0A        %7D%0A%0A\n     \n@@ -3182,32 +3182,173 @@\n      %7D%0A        %0A\n+        if (Jogadores%5Brunning%5D.get_pos() %3E= board_size)%0A        %7B%0A            cout %3C%3C Jogadores%5Brunning%5D.str() %3C%3C %22 ganhou%22%3C%3C endl;%0A        %7D\n %0A        %0A      \n"
        },
        {
            "label": "2025-02-28_00-06-39",
            "content": "@@ -2890,60 +2890,8 @@\n dl;%0A\n-            Jogadores%5Brunning%5D.set_pos(board_size);%0A\n     \n"
        },
        {
            "label": "2025-02-28_00-07-28",
            "content": "@@ -2939,12 +2939,8 @@\n size\n- - 1\n );%0A \n"
        },
        {
            "label": "2025-02-28_00-09-22",
            "content": "@@ -2197,158 +2197,8 @@\n s)%7B%0A\n-        if (Jogadores%5Brunning%5D.get_pos() == board_size)%0A        %7B%0A            cout %3C%3C %22game is over%22 %3C%3C endl;%0A            return;%0A        %7D%0A        %0A%0A\n     \n"
        },
        {
            "label": "2025-02-28_00-20-32",
            "content": "@@ -2237,17 +2237,16 @@\n os() == \n-(\n board_si\n@@ -2251,11 +2251,8 @@\n size\n--1)\n )%0A  \n"
        },
        {
            "label": "2025-02-28_00-21-44",
            "content": "#include <iostream>\n#include <vector>\n#include <sstream>\n\n#include \"fn.hpp\"\n\nusing namespace std;\n\nclass Player\n{\nprivate:\n    /* data */\n    int label;\n    int pos;\n    bool free;\npublic:\n    Player(int x) : label(x){\n        pos = 0;\n        free = true;\n    };\n    bool esta_livre(){return free;}\n    \n    int get_label(){return label;}\n    \n    int get_pos(){return pos;}\n\n    void set_pos(int numero){ pos = numero;}\n    void set_free(bool libertar){free = libertar;}\n\n    std::string str() const{\n        return fn::format(\"player{}\",label);\n    };\n    \n};\n\n\n\n\nclass tabuleiro\n{\nprivate:\n    vector<int> armadilhas;\n    vector<Player> Jogadores;\n    int running;\n    int board_size;\n\npublic:\n    tabuleiro(int nPlayers = 2 ,int size = 5): board_size(size+ 1) {\n        for (auto i = 0; i < nPlayers; i++)\n        {\n            Jogadores.push_back(Player(i+1));\n        }\n        \n    };\n\n    string  str(){\n\n        string buffer = \"\";\n\n        for (auto i = 0; i < static_cast<int>(Jogadores.size()); i++)\n        {\n            buffer += Jogadores[i].str() + \": \";\n            \n            for (int j = 0; j < board_size; j++)\n            {\n                \n                if ( Jogadores[i].get_pos() == j)\n                {\n                    /* code */\n                    buffer += to_string(Jogadores[i].get_label());\n                    continue;\n                }\n                \n\n\n                buffer += \".\";\n            }\n            \n            buffer += \"\\n\";\n\n        }\n\n        buffer += \"traps__: \";\n        bool no_trap;\n        for (auto i = 0; i < board_size; i++)\n        {   \n            no_trap = true;\n            for (auto j = 0; j < static_cast<int>(armadilhas.size()); j++)\n            {\n                \n                if (armadilhas[j] == i)\n                {\n                    buffer += \"x\";\n                    no_trap = false;\n                }\n                \n            }\n            \n            if (no_trap)\n            {\n                buffer += \".\";\n            }\n            \n        }\n\n\n        return buffer;\n        \n        \n    };\n    \n    void add_trap(int trap){\n        armadilhas.push_back(trap);\n    };\n    \n    void roll(int passos){\n        if (Jogadores[running].get_pos() == (board_size-1))\n        {\n            cout << \"game is over\" << endl;\n            return;\n        }\n        \n\n        if (running >= static_cast<int>(Jogadores.size())){running = 0;}\n\n        if (!Jogadores[running].esta_livre())\n        {\n            if (passos%2 == 0)\n            {\n                cout << Jogadores[running].str() << \" se libertou\" << endl;\n                Jogadores[running].set_free(true);\n            }else{\n                cout << Jogadores[running].str() << \" continua preso\" << endl;\n            }\n            running++;\n            return;\n        }\n        \n        \n        Jogadores[running].set_pos(Jogadores[running].get_pos() + passos);\n\n        if (Jogadores[running].get_pos() >= board_size)\n        {\n            cout << Jogadores[running].str() << \" ganhou\"<< endl;\n            Jogadores[running].set_pos(board_size - 1);\n            return;\n        }\n\n        cout << Jogadores[running].str() << \" andou para \" << Jogadores[running].get_pos() << endl;\n        \n        for (auto i = 0; i < static_cast<int>(armadilhas.size()); i++)\n        {\n            if (Jogadores[running].get_pos() == armadilhas[i])\n            {\n                cout << Jogadores[running].str() << \" caiu em uma armadilha\"<< endl;\n                Jogadores[running].set_free(false);\n            }\n        }\n        \n\n        \n        \n\n        running++;\n    };\n\n};\n\n\nint main() {\n\n    auto Jumanji = tabuleiro();\n\n    while(true) {\n        string line, cmd;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n\n        stringstream ss(line);\n        ss >> cmd;\n\n        if (cmd == \"end\") {\n            break;\n        } else if (cmd == \"init\") {\n             int nPlayers, size;\n             ss >> nPlayers >> size;\n             Jumanji = tabuleiro(nPlayers, size);\n        } else if (cmd == \"addTrap\") {\n             int pos;\n             ss >> pos;\n             Jumanji.add_trap(pos);\n        } else if (cmd == \"roll\") {\n             int value;\n             ss >> value;\n             Jumanji.roll(value);\n        } else if (cmd == \"show\") {\n            cout << Jumanji.str() << endl;\n        } else {\n            cout << \"fail: command not found\" << endl;\n        }\n\n    }\n}\n"
        }
    ]
}